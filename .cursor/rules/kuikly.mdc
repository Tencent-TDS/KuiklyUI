# KuiklyUI 项目完整开发指南 - Cursor AI 助手

## 1. 项目概述

### 1.1 项目简介
KuiklyUI 是基于 Kotlin Multiplatform (KMP) 的跨平台 UI 框架，由腾讯前端 Oteam 开源。
实现"一套代码，五端运行"：Android、iOS、HarmonyOS、H5、小程序。

### 1.2 核心特性
- **跨平台一致性**: 基于 Kotlin 实现，确保多端逻辑和表现一致
- **原生性能**: 编译生成平台原生二进制产物，UI由原生渲染层驱动
- **轻量级**: SDK 体积小（Android ~300KB, iOS ~1.2MB）
- **动态化能力**: 支持编译为动态化产物，实现UI和逻辑的动态更新
- **双 DSL 支持**: 自研声明式 DSL + 深度适配的 Compose DSL

### 1.3 技术架构
```
┌─────────────────────────────────────────────────┐
│                业务层 (Demo)                      │
├─────────────────────────────────────────────────┤
│            核心层 (Core + Compose)                │
│  • UI 描述 DSL (自研 + Compose)                   │
│  • 状态管理和响应式系统                            │
│  • 通用布局算法                                   │
│  • Bridge 通信机制                                │
├─────────────────────────────────────────────────┤
│           平台渲染层 (core-render-*)               │
│  • Android: View 系统                            │
│  • iOS: UIKit                                    │ 
│  • HarmonyOS: ArkUI                              │
│  • Web: DOM/WXML                                 │
├─────────────────────────────────────────────────┤
│        注解处理层 (annotations + ksp)              │
│  • @Page 注解处理                                │
│  • 自动生成平台入口代码                            │
└─────────────────────────────────────────────────┘
```

## 2. 项目结构详解

### 2.1 主要模块
```
KuiklyUI/
├── core/                    # 核心模块：响应式UI、布局算法、Bridge通信
│   ├── src/commonMain/      # 跨平台通用代码
│   ├── src/androidMain/     # Android 平台实现 (输出 .aar)
│   ├── src/iosMain/         # iOS 平台实现 (输出 .framework)
│   ├── src/ohosArm64Main/   # 鸿蒙平台实现 (输出 .so)
│   └── src/jsMain/          # H5/小程序平台实现 (输出 .js)
├── compose/                 # Compose DSL 模块 (基于 Jetpack Compose 1.7.3)
├── core-render-*/           # 各平台渲染器模块
├── core-annotations/        # 注解定义模块 (@Page 等)
├── core-ksp/               # 注解处理模块 (KSP)
├── demo/                   # 示例代码
├── *App/                   # 各平台宿主应用
└── buildSrc/               # 构建脚本

```

### 2.2 包名约定
- 框架包名：`com.tencent.kuikly.core.*`
- Compose包名：`com.tencent.kuikly.compose.*` (修改自 `androidx.compose`)
- 应用包名：项目自定义

## 3. 核心概念与 API

### 3.1 页面开发模式
编写代码时，可以参考 demo/src/commonMain/kotlin/com/tencent/kuikly/demo/pages 里面的例子

如果是 compose dsl，可以参考 demo/src/commonMain/kotlin/com/tencent/kuikly/demo/pages/compose 里面的例子

#### 页面类定义
```kotlin
package com.tencent.kuikly.demo.page.my_page

import com.tencent.kuikly.core.annotations.Page
import com.tencent.kuikly.core.base.ViewBuilder
import com.tencent.kuikly.core.reactive.ObservableThreadSafetyMode
import com.tencent.kuikly.core.reactive.handler.observable
import com.tencent.kuikly.demo.pages.base.BasePager

@Page("my_page")
internal class MyPage : BasePager() {
    override fun created() {
        super.created()
        initData()
    }

    private fun initData() {
        dataList.add("item1")
    }

    override fun body(): ViewBuilder {
        return buildUI(this)
    }

    override fun pageDidAppear() {
        super.pageDidAppear()
        // 页面可见时的逻辑
    }

    override fun pageWillDestroy() {
        super.pageWillDestroy()
        // 页面销毁前的清理工作
    }
}
```

#### UI 构建文件 (pageUI.kt)
```kotlin
package com.tencent.kuikly.demo.page.my_page

import com.tencent.kuikly.core.base.Color
import com.tencent.kuikly.core.base.ViewBuilder
import com.tencent.kuikly.core.pager.Pager
import com.tencent.kuikly.core.views.*

fun buildUI(page: Pager): ViewBuilder {
    val ctx = page as MyPage
    return {
        View {
            attr {
                flex(1f)
                backgroundColor(Color.WHITE)
                flexDirectionColumn()
            }

            // 标题栏
            View {
                attr {
                    height(60f)
                    flexDirectionRow()
                    alignItemsCenter()
                    paddingHorizontal(16f)
                }
                Text {
                    attr {
                        text(ctx.title)
                        fontSize(18f)
                        color(Color.BLACK)
                        fontWeightBold()
                    }
                }
            }

            // 内容区域
            View {
                attr {
                    flex(1f)
                    padding(16f)
                }
                
                // 条件渲染
                vif({ ctx.isLoading }) {
                    Text {
                        attr {
                            text("加载中...")
                            textAlignCenter()
                        }
                    }
                }

                // 列表渲染
                vfor({ ctx.dataList }) { item, index ->
                    View {
                        attr {
                            height(44f)
                            flexDirectionRow()
                            alignItemsCenter()
                            marginBottom(8f)
                        }
                        Text {
                            attr {
                                text(item)
                                fontSize(16f)
                                color(Color(0xFF333333))
                            }
                        }
                    }
                }
            }
        }
    }
}
```

### 3.2 组件开发模式

```kotlin
package com.tencent.kuikly.demo.page.component

import com.tencent.kuikly.core.base.*
import com.tencent.kuikly.core.views.*

// 组件属性定义
internal class MyButtonAttr : ComposeAttr() {
    var text: String = ""
    var width: Float = 120f
    var height: Float = 44f
    var backgroundColor: Color = Color.BLUE
    var textColor: Color = Color.WHITE
    var fontSize: Float = 16f
    var borderRadius: Float = 8f
}

// 组件事件定义
internal class MyButtonEvent : ComposeEvent() {
    var onClick: (() -> Unit)? = null
}

// 组件实现
internal class MyButton : ComposeView<MyButtonAttr, MyButtonEvent>() {
    override fun createEvent() = MyButtonEvent()
    override fun createAttr() = MyButtonAttr()

    override fun body(): ViewBuilder {
        val ctx = this
        return {
            View {
                attr {
                    width(ctx.attr.width)
                    height(ctx.attr.height)
                    backgroundColor(ctx.attr.backgroundColor)
                    borderRadius(ctx.attr.borderRadius)
                    justifyContentCenter()
                    alignItemsCenter()
                }
                Text {
                    attr {
                        text(ctx.attr.text)
                        fontSize(ctx.attr.fontSize)
                        color(ctx.attr.textColor)
                    }
                }
                event {
                    click { ctx.event.onClick?.invoke() }
                }
            }
        }
    }
}

// 使用组件
fun ViewContainer<*, *>.MyButton(init: MyButton.() -> Unit) {
    addChild(MyButton(), init)
}
```

### 3.3 模块开发模式

```kotlin
// Kuikly 侧模块定义
class TimerModule : Module() {
    override fun moduleName(): String = MODULE_NAME

    companion object {
        const val MODULE_NAME = "KRTimerModule"
    }

    fun setInterval(interval: Long, callbackFn: CallbackFn?): String {
        if (interval <= 0) throw IllegalArgumentException("Delay must be a positive integer")
        val safeParam = JSONObject().apply { put("interval", interval) }
        return toNative(
            true,
            "setInterval",
            safeParam.toString(),
            callbackFn ?: throw IllegalArgumentException("Callback function cannot be null"),
            true
        ).toString()
    }

    fun clearInterval(intervalID: String) {
        if (intervalID.isEmpty()) throw IllegalArgumentException("Interval ID must be a non-negative integer")
        syncCallNativeMethod(
            "clearInterval",
            JSONObject().apply { put("intervalID", intervalID) },
            null
        )
    }

    fun clearAllInterval() {
        syncCallNativeMethod("clearAllInterval", null, null)
    }
}

// 页面中注册和使用模块
@Page("timer_page")
internal class TimerPage : BasePager() {
    private lateinit var timerModule: TimerModule
    
    override fun created() {
        super.created()
        timerModule = acquireModule(TimerModule.MODULE_NAME)
    }

    override fun createExternalModules(): Map<String, Module> {
        return mapOf(
            TimerModule.MODULE_NAME to TimerModule()
        )
    }

    override fun pageWillDestroy() {
        super.pageWillDestroy()
        timerModule.clearAllInterval()
    }
}
```


## 4. 常见错误与解决方案

### 4.1 导入错误
```kotlin
// ❌ 错误写法 - 使用标准库路径
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import org.json.JSONObject

// ✅ 正确写法 - 使用 Kuikly 框架路径
import com.tencent.kuikly.core.coroutines.GlobalScope
import com.tencent.kuikly.core.coroutines.launch
import com.tencent.kuikly.core.nvi.serialization.json.JSONObject
```

### 4.2 组件属性错误
```kotlin
// ❌ 错误写法 - Text 组件使用 View 属性
Text {
    attr {
        alignItemsCenter()       // Text 不支持此属性
        paddingHorizontal(4f)    // Text 不支持 padding
    }
}

// ✅ 正确写法 - Text 组件使用对应属性
Text {
    attr {
        textAlignCenter()        // 文本居中对齐
        marginLeft(4f)           // 使用 margin
        marginRight(4f)
    }
}
```

### 4.3 颜色处理错误
```kotlin
// ❌ 错误写法 - 使用 Android Color.parseColor
color(Color.parseColor("#333333"))

// ✅ 正确写法 - 使用 Kuikly Color 构造函数
color(Color(0xFF333333))
color(Color.parseString16ToLong("#333333"))
```

### 4.4 生命周期方法错误
```kotlin
// ❌ 错误写法 - 使用不存在的生命周期方法
override fun onDestroyView() {          // 不存在此方法
    super.onDestroyView()
}

// ✅ 正确写法 - 使用正确的生命周期方法
override fun pageWillDestroy() {        // 正确的生命周期方法
    super.pageWillDestroy()
}
```

### 4.5 模块调用错误
```kotlin
// ❌ 错误写法 - 在 pageWillDestroy 中调用 Module
override fun pageWillDestroy() {
    super.pageWillDestroy()
    // 此时 Module 的 Native 方法不可用
    timerModule.clearAllInterval()      // 可能失败
}

// ✅ 正确写法 - 在页面可见期间或销毁前调用
override fun pageDidDisappear() {
    super.pageDidDisappear()
    timerModule.clearAllInterval()      // 安全调用
}
```

### 错误解决策略

#### 策略1：属性使用规则
- **View 组件**：支持 `alignItemsCenter()`、`padding()`、`paddingLeft()`、`paddingRight()` 等布局属性
- **Text 组件**：使用 `textAlignCenter()`、`marginLeft()`、`marginRight()` 等文本和间距属性
- **规则**：布局属性用于容器组件，文本属性用于文本组件

#### 策略2：导入路径检查
- **原则**：优先使用 `com.tencent.kuikly.core.*` 路径下的类
- **方法**：遇到导入错误时，搜索项目中其他文件的正确导入路径
- **工具**：使用 `search_codebase` 搜索正确的导入示例

#### 策略3：生命周期方法查找
- **方法**：搜索其他组件文件中的生命周期方法使用示例
- **常用方法**：`created()`、`viewDestroyed()`、`pageDidAppear()`、`onDestroyPager()`
- **避免**：不要使用 Android 特有的生命周期方法


## 5. 开发最佳实践

### 5.1 调试技巧
```kotlin
// 1. 使用编译错误快速定位问题
// 编译命令：./gradlew :shared:compileKotlinIosArm64

// 2. 分段注释调试复杂 UI
fun buildUI(page: Pager): ViewBuilder {
    val ctx = page as ComplexPage
    return {
        View {
            attr { flex(1f) }
            
            // TODO: 暂时注释复杂部分，逐步添加
            HeaderComponent { /* ... */ }
            
            // ContentComponent { /* ... */ }  // 注释掉
            
            // FooterComponent { /* ... */ }   // 注释掉
        }
    }
}

// 3. 使用 TODO 标记待处理项
fun buildUI(page: Pager): ViewBuilder {
    val ctx = page as TodoPage
    return {
        View {
            Text {
                attr {
                    text(ctx.title)
                    // TODO: 需要从 ctx.themeColor 解析颜色
                    color(Color.BLACK)
                }
            }
            
            // TODO: 添加数据列表
            // vfor({ ctx.dataArray }) { item, index ->
            //     // 待实现
            // }
        }
    }
}
```

## 6. Compose DSL 支持 (Beta)
编写 compose dsl 代码，可以参考 demo/src/commonMain/kotlin/com/tencent/kuikly/demo/pages/compose 里面的例子

### 6.1 Compose 页面
```kotlin
@Page("compose_page")
internal class ComposePage : ComposeContainer() {
    override fun willInit() {
        super.willInit()
        setContent {
            // 使用标准 Compose DSL
            Column(
                modifier = Modifier.fillMaxSize().padding(16.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text("Hello Compose!")
                Button(onClick = { /* 点击事件 */ }) {
                    Text("Click Me")
                }
            }
        }
    }
}
```

### 6.2 两种 DSL 对比
```kotlin
// 自研 DSL 风格
View {
    attr {
        flex(1f)
        flexDirectionColumn()
        alignItemsCenter()
        justifyContentCenter()
    }
    Text {
        attr {
            text("Hello World")
            fontSize(18f)
            color(Color.BLACK)
        }
    }
}

// Compose DSL 风格 (Beta)
Column(
    modifier = Modifier.fillMaxSize(),
    verticalArrangement = Arrangement.Center,
    horizontalAlignment = Alignment.CenterHorizontally
) {
    Text(
        text = "Hello World",
        fontSize = 18.sp,
        color = androidx.compose.ui.graphics.Color.Black
    )
}
```


---

## 总结

KuiklyUI 是一个功能强大的跨平台 UI 框架，支持多种 DSL 风格和平台。开发时需要注意：

1. **严格遵循框架的包名和 API 规范**
2. **正确使用响应式数据系统**
3. **合理组织页面和组件结构**
4. **注意生命周期方法的使用时机**
5. **善用调试技巧快速定位问题**

通过本文档的指导，可以快速上手 KuiklyUI 开发，并避免常见的开发陷阱。
description:
globs:
alwaysApply: true
---
